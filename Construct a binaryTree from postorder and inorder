/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int findpos(int element,vector<int>inorder)
{
    for(int i=0;i<inorder.size();i++)
    {
        if(element==inorder[i])
        return i;
    }
    return -1;
}
     TreeNode* buildTreefrompostIn(vector<int>& inorder,vector<int>& postorder,int& postindex,int inorderstart,int inorderend)
     {
         if(postindex<0||inorderstart>inorderend)
         {
             return NULL;
         }
         int element=postorder[postindex--];
         int pos=findpos(element,inorder);
         TreeNode* root=new TreeNode(element);
         root->right=buildTreefrompostIn(inorder,postorder,postindex,pos+1,inorderend);
         root->left=buildTreefrompostIn(inorder,postorder,postindex,inorderstart,pos-1);
         return root;
     }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int postindex=postorder.size()-1;
        int inorderstart=0;
        int inorderend=inorder.size()-1;
        TreeNode* node=buildTreefrompostIn(inorder,postorder,postindex,inorderstart,inorderend);
        return node;
    }
};
