/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     int findpos(int element,vector<int>& inorder)
     {
         for(int i=0;i<inorder.size();i++)
         {
             if(element==inorder[i])
             return i;
         }
         return -1;
     }
     TreeNode* buildTreefrompreIn(vector<int>& preorder,vector<int>& inorder,int& preindex,int inorderstart,int inorderend)
     {
             if(preindex>preorder.size()-1||inorderstart>inorderend)
             {
                 return NULL;
             }
             int element=preorder[preindex++];
             int pos=findpos(element,inorder);
             TreeNode* root=new TreeNode(element);
             root->left=buildTreefrompreIn(preorder,inorder,preindex,inorderstart,pos-1);
             root->right=buildTreefrompreIn(preorder,inorder,preindex,pos+1,inorderend);
             return root;
     }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int preindex=0;
        int inorderstart=0;
        int inorderend=preorder.size()-1;
        TreeNode* node=buildTreefrompreIn(preorder,inorder,preindex,inorderstart,inorderend);
        return node;
    }
};
